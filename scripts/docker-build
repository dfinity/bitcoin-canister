#!/usr/bin/env bash
# vim: ft=bash
# Build the canisters inside docker. This outputs the requested ".wasm.gz" files.

set -euo pipefail

# Make sure we always run from the root
SCRIPTS_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$SCRIPTS_DIR/.."

function title() {
    echo "Build all canisters inside Docker and extract the requested \".wasm.gz\" files"
}

function usage() {
    cat << EOF

Usage:
  $0 [OPTIONS] [canister1] [canister2] ...

EOF
}

function help() {
    cat << EOF

Options:
  --chunk-hashes PATH : Path to chunk_hashes.txt file (required when building uploader canister)
  -h, --help          : Show this help message

Arguments:
  canister1 canister2 ... : Optional list of canister names to extract (e.g., ic-btc-canister, watchdog, uploader)
                           If no arguments are provided, ic-btc-canister and watchdog are extracted by default

This will create (and override) the corresponding ".wasm.gz" files in the current directory.
EOF
}

## Building

function build() {
    # image name and build args, made global because they're used in
    # check_feature()
    image_name="bitcoin-docker-build"

    docker_build_args=(--tag "$image_name")
    
    # Check if uploader canister is requested and add the required build arg
    for canister in "${CANISTERS[@]}"
    do
        if [ "$canister" = "uploader" ]; then
            docker_build_args+=(--build-arg "CHUNK_HASHES_PATH=$CHUNK_HASHES_PATH")
            break
        fi
    done
    
    docker_build_args+=(.)

    echo "The following image name will be used: $image_name"

    set -x
    DOCKER_BUILDKIT=1 docker build "${docker_build_args[@]}"
    set +x
}

# ARGUMENT PARSING

CANISTERS=()
CHUNK_HASHES_PATH=""

while [[ $# -gt 0 ]]
do
    case $1 in
        -h|--help)
            title
            usage
            help
            exit 0
            ;;
        --chunk-hashes)
            if [[ -n "${2:-}" ]]; then
                CHUNK_HASHES_PATH="$2"
                shift
                shift
            else
                echo "ERROR: --chunk-hashes requires a path argument"
                usage
                exit 1
            fi
            ;;
        uploader|ic-btc-canister|watchdog)
            CANISTERS+=("$1")
            shift
            ;;
        *)
            echo "ERROR: unknown argument '$1'"
            echo "Valid canisters are: uploader, ic-btc-canister, watchdog"
            usage
            echo
            echo "Use '$0 --help' for more information"
            exit 1
            ;;
    esac
done

if [ -n "$CHUNK_HASHES_PATH" ] && [ ! -f "$CHUNK_HASHES_PATH" ]; then
    echo "ERROR: chunk-hashes file not found: $CHUNK_HASHES_PATH"
    exit 1
fi

if [ ${#CANISTERS[@]} -eq 0 ]; then
    CANISTERS=("ic-btc-canister" "watchdog")
fi

# Validate that chunk-hashes is provided if uploader is requested
for canister in "${CANISTERS[@]}"
do
    if [ "$canister" = "uploader" ] && [ -z "$CHUNK_HASHES_PATH" ]; then
        echo "ERROR: --chunk-hashes is required when building uploader canister"
        usage
        echo
        echo "Use '$0 --help' for more information"
        exit 1
    fi
done

build

for canister in "${CANISTERS[@]}"
do
    echo "Extracting $canister.wasm.gz from container to $PWD"
    docker run --rm --entrypoint cat "$image_name" "/$canister.wasm.gz" > "$canister.wasm.gz"
done
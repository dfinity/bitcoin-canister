/// Canister height status compared to other explorers.
type height_status = variant {
    /// Not enough data to calculate the status.
    not_enough_data;

    /// Canister height is healthy.
    ok;

    /// Canister height is ahead
    /// of other explorers, might not be healthy.
    behind;

    /// Canister height is behind
    /// other explorers, might not be healthy.
    ahead;
};

/// Block API providers.
type bitcoin_block_api = variant {
    api_bitaps_com_mainnet;
    api_blockchair_com_mainnet;
    api_blockcypher_com_mainnet;
    bitcoin_canister;
    bitcoinexplorer_org_mainnet;
    blockchain_info_mainnet;
    blockstream_info_mainnet;
    chain_api_btc_com_mainnet;
    dogecoin_api_blockchair_com_mainnet;
    dogecoin_api_blockcypher_com_mainnet;
    dogecoin_canister;
    dogecoin_tokenview_mainnet;
    mempool_mainnet;
    mempool_testnet;
};

/// Information about a block from a specific API provider.
type block_info = record {
    /// Block API provider.
    provider : bitcoin_block_api;

    /// Block height.
    height : opt nat64;
};

// The health status of the canister monitored.
type health_status = record {
    /// Main chain height of the canister.
    height_source : opt nat64;

    /// Height target derived from explorer heights.
    height_target : opt nat64;

    /// Difference between canister height and target height.
    height_diff : opt int64;

    /// Canister height status.
    height_status : height_status;

    /// Block info from the explorers.
    explorers : vec block_info;
};

/// Network.
type bitcoin_network = variant {
    mainnet;
    testnet;
    dogecoin_mainnet;
};

/// Watchdog canister configuration.
type config = record {
    /// The network to use.
    network : bitcoin_network;

    /// Below this threshold, the canister is considered to be behind.
    blocks_behind_threshold : nat64;

    /// Above this threshold, the canister is considered to be ahead.
    blocks_ahead_threshold : nat64;

    /// The minimum number of explorers to compare against.
    min_explorers : nat64;

    /// Canister principal.
    canister_principal : principal;

    /// The number of seconds to wait before the first data fetch.
    delay_before_first_fetch_sec : nat64;

    /// The number of seconds to wait between all the other data fetches.
    interval_between_fetches_sec : nat64;

    /// Explorers to use for fetching block data.
    explorers : vec bitcoin_block_api;
};

type flag = variant {
    enabled;
    disabled;
};

type canister = variant {
    bitcoin_mainnet;
    bitcoin_testnet;
    dogecoin_mainnet;
    dogecoin_mainnet_staging;
};

service : (canister) -> {
    /// Returns the health status of the canister monitored.
    health_status : () -> (health_status) query;

    /// Returns the configuration of the Watchdog canister.
    get_config : () -> (config) query;

    /// Returns the API access target for the canister monitored.
    get_api_access_target : () -> (opt flag) query;
};

# Seeds for failure cases proptest has generated in the past. It is
# automatically read and these particular cases re-run before any
# novel cases are generated.
#
# It is recommended to check this file in to source control so that
# everyone who runs the test benefits from these saved cases.
cc f9ce64e7b8f2ec6d8dd535b56e1aad46443a3e6589852a73a6b2d9778e4e9870 # shrinks to input = _SerializeDeserializeArgs { tree: BlockTree { root: Block { block: Block { header: BlockHeader { version: 1, prev_blockhash: 0000000000000000000000000000000000000000000000000000000000000000, merkle_root: 91ee09dd76d9df4a91913067f13fd47dca48420335cd64ed5ca6262bfe3ecbeb, time: 0, bits: 545259519, nonce: 2 }, txdata: [Transaction { version: 1, lock_time: 0, input: [TxIn { previous_output: OutPoint { txid: 0000000000000000000000000000000000000000000000000000000000000000, vout: 4294967295 }, script_sig: Script(), sequence: 4294967295, witness: Witness { content: [], witness_elements: 0, last: 0, second_to_last: 0 } }], output: [TxOut { value: 5000000000, script_pubkey: Script(OP_DUP OP_HASH160 OP_PUSHBYTES_20 1c06d2ab6d4557646aeda8477edc4143bb728b7f OP_EQUALVERIFY OP_CHECKSIG) }] }] }, transactions: [Transaction { tx: Transaction { version: 1, lock_time: 0, input: [TxIn { previous_output: OutPoint { txid: 0000000000000000000000000000000000000000000000000000000000000000, vout: 4294967295 }, script_sig: Script(), sequence: 4294967295, witness: Witness { content: [], witness_elements: 0, last: 0, second_to_last: 0 } }], output: [TxOut { value: 5000000000, script_pubkey: Script(OP_DUP OP_HASH160 OP_PUSHBYTES_20 1c06d2ab6d4557646aeda8477edc4143bb728b7f OP_EQUALVERIFY OP_CHECKSIG) }] }, txid: RefCell { value: None } }], block_hash: RefCell { value: None }, mock_difficulty: None }, children: [] } }
